/* The playing eld is a set of lily pads in a 2D space. The frog must always stand on a lily pad. The direction the */
/* frog is pointing towards denes how he can moves. He can onlyjump forward, left or right. It is impossible to skip a lily pad. */
/* A lily pad is removed if the frog leaves it. */


/* We hereby could find the solution for first level, by using all */
/* constraints present in the map (water and lily pads) and on top of ,*/
/* that using cartesian coordinates (X,Y). */


init_state_lpads(frog, p(0,0),[p(1,0),p(1,1),p(1,2),p(2,2),p(3,2),p(4,2),p(4,1),p(4,0),p(5,0),p(2,-1),p(3,-1)]).

/* constraints */
c(0,1,water).
c(0,2,water).
c(0,3,water).
c(1,3,water).
c(2,3,water).
c(3,3,water).
c(4,3,water).
c(5,3,water).
c(5,2,water).
c(5,1,water).
c(5,-1,water).
c(4,-1,water).
c(3,-2,water).
c(2,-2,water).
c(1,-1,water).
c(0,-1,water).
c(2,1,water).
c(3,1,water).
c(2,0,water).
c(3,0,water).

c(1,5,water).
c(1,4,water).
c(2,5,water).
c(2,4,water).
c(3,5,water).
c(3,4,water).
c(4,5,water).
c(4,4,water).
c(5,5,water).
c(5,4,water).

c(-2,2,water).
c(-2,1,water).
c(-2,0,water).
c(-1,2,water).
c(-1,1,water).
c(-1,0,water).

c(1,-2,water).
c(1,-3,water).
c(2,-3,water).
c(2,-4,water).
c(3,-3,water).
c(3,-4,water).
c(4,-2,water).
c(4,-3,water).
c(5,-2,water).
c(5,-3,water).
c(6,2,water).
c(7,2,water).
c(6,1,water).
c(7,1,water).
c(6,0,water).
c(7,0,water).
c(8,0,water).

c(-3,0,water).
c(0,-2,water).
c(0,-3,water).

move(  p( _, _ ), up1    ).
move(  p( _, _ ), up2    ).
move(  p( _, _ ), up3    ).

move(  p( _, _ ), down1  ).
move(  p( _, _ ), down2 ).
move(  p( _, _ ), down3  ).

move(  p( _, _ ), left1  ).
move(  p( _, _ ), left2  ).
move(  p( _, _ ), left3  ).

move( p( _, _ ), right1 ).
move( p( _, _ ), right2 ).
move( p( _, _ ), right3 ).


update(  p(X, Y), up1, p(X, Y_new)  ) :-
	Y_new is Y + 1.
update(  p(X, Y), up2, p(X, Y_new)  ) :-
	Y_new is Y + 2.
update(  p(X, Y), up3, p(X, Y_new)  ) :-
	Y_new is Y + 3.
update(  p(X,Y), down1, p(X, Y_new) ) :-
	Y_new is Y - 1.
update(  p(X,Y), down2, p(X, Y_new) ) :-
	Y_new is Y - 2.
update(  p(X,Y), down3, p(X, Y_new) ) :-
	Y_new is Y - 3.
update(  p(X,Y), left1, p(X_new, Y)  ) :-
	X_new is X - 1.
update(  p(X,Y), left2, p(X_new, Y)  ) :-
	X_new is X - 2.
update(  p(X,Y), left3, p(X_new, Y)  ) :-
	X_new is X - 3.
update(  p(X,Y), right1, p(X_new, Y)  ) :-
X_new is X + 1.
update(  p(X,Y), right2, p(X_new, Y)  ) :-
X_new is X + 2.
update(  p(X,Y), right3, p(X_new, Y)  ) :-
X_new is X + 3.

feasible(  p(X,Y) ) :-
	%X >= 0,
    %Y >= 0,
\+ c(X,Y,water).

solve_pads(_, _, _, _,[]):- write(eureca),!.

solve_pads(Problem, State, History, [Move|Moves],NotVisited) :-
	move(State, Move),
	update(State, Move, NewState),
	feasible(NewState),
	\+ member(NewState, History),
        del(NewState,NotVisited,List),
	solve_pads(Problem, NewState, [NewState|History], Moves,List).

solve_problem(Problem, Solution) :-
	init_state_lpads(Problem, Initial,NoVisited),
        solve_pads(Problem, Initial, [Initial], Solution,NoVisited).
del(X,[X|Tail],Tail).
del(X,[Head|Tail],[Head|NewTail]):-
    del(X,Tail,NewTail).


/* movement types */

x_plus([X, Y], Xi, L):- member([Xi, Y], L), Xi > X.
x_minus([X, Y], Xi, L):- member([Xi, Y], L), Xi < X.
y_plus([X, Y], Yi, L):- member([X, Yi], L), Yi > Y.
y_minus([X, Y], Yi, L):- member([X, Yi], L), Yi < Y.

/* get next - coming from the      left = 001  002 = 002   003 = 003  right = 004 */

next(001    ,[X, Y],[Nx, Ny], L, Nl, ND):- x_plus([X, Y], Xi, L), Nx is Xi, Ny is Y, delete(L, [Nx, Ny], Nl),  ND is 001.
next(001    ,[X, Y],[Nx, Ny], L, Nl, ND):- y_plus([X, Y], Yi, L), Ny is Yi, Nx is X, delete(L, [Nx, Ny], Nl),  ND is 002.
next(001    ,[X, Y],[Nx, Ny], L, Nl, ND):- y_minus([X, Y], Yi, L), Ny is Yi, Nx is X, delete(L, [Nx, Ny], Nl),  ND is 003.

next(002    ,[X, Y],[Nx, Ny], L, Nl, ND):- x_plus([X, Y], Xi, L), Nx is Xi, Ny is Y, delete(L, [Nx, Ny], Nl),  ND is 001.
next(002    ,[X, Y],[Nx, Ny], L, Nl, ND):- x_minus([X, Y], Xi, L), Nx is Xi, Ny is Y, delete(L, [Nx, Ny], Nl),  ND is 004.
next(002    ,[X, Y],[Nx, Ny], L, Nl, ND):- y_plus([X, Y], Yi, L), Ny is Yi, Nx is X, delete(L, [Nx, Ny], Nl),  ND is 002.

next(003    ,[X, Y],[Nx, Ny], L, Nl, ND):- x_plus([X, Y], Xi, L), Nx is Xi, Ny is Y, delete(L, [Nx, Ny], Nl),  ND is 001.
next(003    ,[X, Y],[Nx, Ny], L, Nl, ND):- x_minus([X, Y], Xi, L), Nx is Xi, Ny is Y, delete(L, [Nx, Ny], Nl),  ND is 004.
next(003    ,[X, Y],[Nx, Ny], L, Nl, ND):- y_minus([X, Y], Yi, L), Ny is Yi, Nx is X, delete(L, [Nx, Ny], Nl),  ND is 003.

next(004    ,[X, Y],[Nx, Ny], L, Nl, ND):- x_minus([X, Y], Xi, L), Nx is Xi, Ny is Y, delete(L, [Nx, Ny], Nl),  ND is 004.
next(004    ,[X, Y],[Nx, Ny], L, Nl, ND):- y_plus([X, Y], Yi, L), Ny is Yi, Nx is X, delete(L, [Nx, Ny], Nl),  ND is 002.
next(004    ,[X, Y],[Nx, Ny], L, Nl, ND):- y_minus([X, Y], Yi, L), Ny is Yi, Nx is X, delete(L, [Nx, Ny], Nl),  ND is 003.

order(L, D, [X, Y], Moves):- next(D,[X, Y],[Nx, Ny], L, Nl, Nd),
            !,
            order(Nl, Nd,[Nx, Ny],[[[Nx, Ny],[X, Y]]|Moves]).
order(L, D, [X, Y], Moves):- output(Moves).

output([]) :- nl.
output([[A, B]|MovesList]) :- output(MovesList), write(B), write(' -> '), write(A), nl.

find1 :-  order([[0, 2],[1, 0],[1, 1],[1, 2],[2, 0],[2, 3],[3, 0],[3, 3],[4, 0],[4, 1],[4, 2],[5, 2]], 001, [0,2], []).

find2 :-  order([[0, 1],[0, 2],[0, 3],[1, 1],[1, 3],[2, 0],[2, 1],[2, 3],[2, 4],[3, 1],[3, 3],[4, 1],[4, 2],[4, 3]],001,[2, 4],[]).


